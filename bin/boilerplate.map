ROM0 bank #0:
  SECTION: $0000-$0060 ($0061 bytes) ["Vectors"]
           $0000 = NULL
           $0008 = WaitVBlank
           $0010 = Memset
           $0018 = MemcpySmall
           $0020 = MemsetSmall
           $0025 = JumpToPtr
           $0028 = CallHL
           $0030 = CallDE
           $0038 = Crash
  SECTION: $0061-$00de ($007e bytes) ["SGB routines"]
           $0061 = SendPackets
           $0066 = SendPackets.sendPacket
           $0070 = FreezeSGBScreen
           $0073 = SendPacketNoDelay
           $007c = SendPacketNoDelay.sendByte
           $0080 = SendPacketNoDelay.sendBit
           $0087 = SendPacketNoDelay.bitSet
           $009c = SGBDelay
           $009f = SGBDelay.loop
           $00a8 = FreezeScreenPacket
           $00b8 = FillScreenWithSGBMap
           $00c1 = FillScreenWithSGBMap.writeRow
           $00c3 = FillScreenWithSGBMap.writeTile
           $00d4 = FillScreenWithSGBMap.done
           $00d8 = SetupSGBLCDC
  SECTION: $00df-$00ff ($0021 bytes) ["rand"]
           $00df = rand
  SECTION: $0100-$01a4 ($00a5 bytes) ["Header"]
           $0150 = EntryPoint
           $0152 = Reset
  SECTION: $01a5-$0623 ($047f bytes) ["Crash handler"]
           $01a5 = HandleCrash
           $01e2 = HandleCrash.copyAcross
           $01f6 = HandleCrash.bank0
           $0204 = HandleCrash.writeAttrRow
           $0236 = HandleCrash.pb8BlockLoop
           $023b = HandleCrash.pb8BitLoop
           $023e = HandleCrash.pb8Repeat
           $025a = HandleCrash.writeHeaderLine
           $029a = HandleCrash.writeDump
           $02dd = HandleCrash.writeBank
           $02f3 = HandleCrash.banksDone
           $02fb = HandleCrash.writeBuildDate
           $0305 = HandleCrash.digit
           $0321 = HandleCrash.loop
           $034f = HandleCrash.unlocked
           $0357 = HandleCrash.noDumpSwitch
           $0366 = HandleCrash.noInc
           $0374 = HandleCrash.noDown
           $0382 = HandleCrash.noUp
           $03a6 = HandleCrash.wait
           $03bd = HandleCrash.waitAfter
           $03cc = HandleCrash.poll
           $03d6 = HandleCrash.printHexBC
           $03da = HandleCrash.printHexA
           $03db = HandleCrash.printHexB
           $03e6 = HandleCrash.printDump
           $03f7 = HandleCrash.writeDumpLine
           $03fe = HandleCrash.writeDumpWord
           $0415 = HandleCrash.font
           $05a7 = HandleCrash.header
           $05fa = HandleCrash.viewStr
           $0601 = HandleCrash.spStr
           $0605 = HandleCrash.hwRegsStrs
  SECTION: $0624-$0692 ($006f bytes) ["VBlank handler"]
           $0624 = VBlankHandler
           $0643 = VBlankHandler.noOAMTransfer
           $0662 = VBlankHandler.notUpAndDown
           $0669 = VBlankHandler.notLeftAndRight
           $0678 = VBlankHandler.dontReset
           $0689 = VBlankHandler.lagFrame
           $068b = VBlankHandler.perhapsReset
  SECTION: $0693-$06c2 ($0030 bytes) ["pb16"]
           $0693 = pb16_unpack_packet
           $0698 = pb16_unpack_packet.byteloop
           $069e = pb16_unpack_packet.p0_is_literal
           $06a2 = pb16_unpack_packet.have_p0
           $06ab = pb16_unpack_packet.have_p1
           $06b1 = pb16_unpack_block
           $06b5 = pb16_unpack_block.packetloop
  SECTION: $06c3-$06dd ($001b bytes) ["Build date"]
           $06c9 = BuildDate
  SECTION: $06de-$06ec ($000f bytes) ["LCDMemcpy"]
           $06de = LCDMemcpy.waitVRAM_4
           $06de = LCDMemcpy
  SECTION: $06ed-$06fb ($000f bytes) ["LCDMemset"]
           $06ed = LCDMemset
           $06ee = LCDMemsetFromD.waitVRAM_2
           $06ee = LCDMemsetFromD
  SECTION: $06fc-$0708 ($000d bytes) ["LCDMemsetSmallFromB"]
           $06fc = LCDMemsetSmall
           $06fd = LCDMemsetSmallFromB.waitVRAM_1
           $06fd = LCDMemsetSmallFromB
  SECTION: $0709-$0715 ($000d bytes) ["LCDMemcpySmall"]
           $0709 = LCDMemcpySmall.waitVRAM_3
           $0709 = LCDMemcpySmall
  SECTION: $0716-$071e ($0009 bytes) ["Memcpy"]
           $0716 = Memcpy
    SLACK: $38e1 bytes

ROMX bank #1:
  SECTION: $4000 (0 bytes) ["Intro"]
           $4000 = Intro
  SECTION: $4000-$4007 ($0008 bytes) ["OAM DMA routine"]
           $4000 = OAMDMA
           $4004 = OAMDMA.wait
           $4008 = OAMDMA.end
    SLACK: $3ff8 bytes

VRAM bank #0:
  SECTION: $9c00-$9fff ($0400 bytes) ["9C00 tilemap"]
           $9d96 = vCrashAF
           $9d9c = vCrashHL
           $9d9e = vCrashSP
           $9db4 = vHeldKeys
           $9db5 = vUnlockCounter
           $9db6 = vWhichDump
           $9db7 = vDumpHL
           $9dbb = vCrashVBK
           $9dcb = vCrashDumpScreen
           $9e4b = vCrashDumpScreen.row4
           $9e6b = vCrashDumpScreen.row5
           $9f8b = vCrashDumpScreen.row14
           $9fab = vCrashDumpScreen.row15
           $9fcb = vCrashDumpScreen.row16
           $9feb = vCrashDumpScreen.row17
    SLACK: $1c00 bytes

WRAM0 bank #0:
  SECTION: $c000-$c09f ($00a0 bytes) ["Shadow OAM"]
           $c000 = wShadowOAM
  SECTION: $c0a0-$c0a3 ($0004 bytes) ["rand_ram"]
           $c0a0 = randstate
  SECTION: $c0a4-$c0a6 ($0003 bytes) ["Crash handler scratch"]
           $c0a4 = wCrashA
           $c0a5 = wCrashIE
           $c0a6 = wCrashLCDC
  SECTION: $dfc0-$dfff ($0040 bytes) ["Stack"]
           $e000 = wStackBottom
    SLACK: $1f19 bytes

HRAM bank #0:
  SECTION: $ff80-$ff8a ($000b bytes) ["VBlank HRAM"]
           $ff80 = hVBlankFlag
           $ff81 = hOAMHigh
           $ff82 = hLCDC
           $ff83 = hSCY
           $ff84 = hSCX
           $ff85 = hBGP
           $ff86 = hOBP0
           $ff87 = hOBP1
           $ff88 = hHeldKeys
           $ff89 = hPressedKeys
           $ff8a = hCanSoftReset
  SECTION: $ff8b-$ff92 ($0008 bytes) ["OAM DMA"]
           $ff8b = hOAMDMA
  SECTION: $ff93-$ff94 ($0002 bytes) ["Global vars"]
           $ff93 = hConsoleType
           $ff94 = hCurROMBank
  SECTION: $ff95-$ff95 ($0001 byte) ["pb16 temp byte"]
           $ff95 = pb16_byte0
    SLACK: $0069 bytes

